.card.h-100{ id: "#{dom_id post}"}
  .card-header.bg-white
    .d-flex.justify-content-between
      %div
        = link_to post.user, class: 'a-decoration-none' do
          - if post.user.avatar.attached?
            = image_tag post.user.avatar, class: 'img-thumbnail rounded-circle', style: 'width: 10%'
          - else
            = image_tag asset_path('default-avatar.png'), class: 'img-thumbnail rounded-circle', style: 'width: 10%'
        = link_to post.user, class: 'a-decoration-none' do
          %span.fw-bold.mx-2
            = post.user.name
            = post.user.surname
      %div
        - if current_user == post.user
          .dropdown
            %a.text-dark.fs-4{"aria-expanded" => "false", "data-bs-toggle" => "dropdown", href: "#", role: "button", style: "text-decoration:none"}
              \...
            %ul.dropdown-menu
              %li
                = button_to 'Delete post', post, method: :delete, class: 'dropdown-item'
  .card-body
    #post.carousel-inner
      - if post.image.present?
        = image_tag post.image.medium.url, class: 'd-block w-100', style: 'max-height: 100%; object-fit: cover;'
    = render "posts/post_actions", post: post
    %p.card-text
      %span.fw-bold
        = post.user.name
        = post.user.surname
      = post.text
      = render "posts/post_comments", post: post
    %small.text-muted= time_ago_in_words(post.created_at)
    = render "posts/comment_form", post: post

/ Modal для комментариев (вне области Turbo Stream обновлений)
.modal.fade{"aria-hidden" => "true", "aria-labelledby" => "post#{post.id}_commentsModal", id: "post#{post.id}_commentsModal", tabindex: "-1"}
  .modal-dialog
    .modal-content
      .modal-header
        %h1.modal-title.fs-5{id: "post#{post.id}_commentsModal", style: "color: #000 !important;"} Post Comments
        %button.btn-close{"aria-label" => "Close", "data-bs-dismiss" => "modal", type: "button"}
      .modal-body{id: "post#{post.id}_modal_body"}
        .d-flex.flex-column.gap-3
          - Comment.where(post: post).order(:created_at).each do |comment|
            = render "posts/model_comment", comment: comment
